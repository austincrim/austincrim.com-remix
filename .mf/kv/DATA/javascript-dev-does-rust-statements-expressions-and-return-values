{
  "dateWritten": "2021-07-06T02:27:13.000Z",
  "title": "JavaScript Dev Does Rust: Statements, expressions, and return values",
  "lede": "I have started to dip my toes into Rust-land and I will be jotting done some of my aha's and gotchas, like this example!",
  "content": "In Rust, a **statement** is a piece of code that does not return a value and always ends with a semicolon\n```rust\nlet x = 12;\n\nprintln!(\"x is {}\", x);\n```rust\nAn **expression** is code that evaluates to something. Most Rust code contains expressions.\n```rust\nlet y = 2 + 2;  // 2 + 2 is an expression within a statement\n\ndo_something()  // do_something() is an expression the returns a value\n```\nThis distinction is important, especially when reading functions. It might not be obvious what this function is returning at first glance. A function's return value can be the **last expression evaluated** by body of the function.\n```rust\nfn sum_and_double(x: i32, y: i32) -> i32 {\n    let summed = x + y;\n    summed * 2  // since this is the last expression, it is implicitly returned\n}\n```\n`summed * 2` is the last expression so it evaluates and returns that value from the function. This would break if we added a semicolon because that would turn the line into a statement.\n\nThis code would result in a compiler error for mismatched types because we are not returning an `i32`, we are returning nothing!\n```rust\nfn sum_and_double(x: i32, y: i32) -> i32 {\n    let summed = x + y;\n    summed * 2;  // Compiler error! This is now a statement and nothing gets returned from the function!\n}\n```\nYou can explicitly use the `return` keyword in functions, which is required for returning early, but the implicit return is a de facto standard and you will see it everywhere.\n\nPay attention to the semicolons!\n"
}