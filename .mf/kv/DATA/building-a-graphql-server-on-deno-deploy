{
  "dateWritten": "2021-10-05T02:25:26.000Z",
  "title": "Building a Graphql Server on Deno Deploy",
  "lede": "Combining two hot technologies to create a hypestack application",
  "content": "**Prerequisites**\n\n1.  [Install Deno](https://deno.land/#installation)\n2.  [Sign Up for Deno Deploy](https://deno.com/deploy/)\n3.  [Install `deployctl` (optional, allows you to run your app locally)](https://deno.com/deploy/docs/deployctl/)\n4.  Create and clone a GitHub repo to house our project (this is allows us to easily deploy to Deno Deploy)\n\n### Up and running on Deno Deploy\n\nLet's start by creating the simplest Deno Deploy project by creating an `index.js` (or `.ts`) file in our repo and adding a fetch event listener.\n```js\n    addEventListener(\"fetch\", (event) => {\n      event.respondWith(new Response(\"hello world!\"))\n    })\n```\nIf you want to run this locally with hot reloading:\n```bash\n    deployctl run --watch index.js\n```\nTo get this deployed:\n\n1.  head to https://deno.com/deploy\n2.  sign in with github\n3.  select \"Create new project\" and choose a name\n4.  select \"Connect to GitHub\" near the bottom of the page\n5.  enter the exact URL **to your `index.js` file.** e.g `https://github.com/austincrim/simple-deno-gql/blob/main/index.js`\n\nCongrats! If you visit the URL provided on your project page, you should see \"hello world\".\n\n### Adding GraphQL\n\nNext, let's write a basic GraphQL schema file:\n```graphql\n    \"\"\"\n    schema.gql\n    \"\"\"\n    type Note {\n       id: String\n       title: String\n       content: String\n    }\n\n    type Query {\n       note(id: String): Note\n    }\n```\nNow we can bring in `graphql-deno` to parse our schema file. This library is a Deno-compatible port of [GraphQL.js](https://github.com/graphql/graphql-js).\n```js\n    import { buildSchema } from \"https://raw.githubusercontent.com/adelsz/graphql-deno/v15.0.0/mod.ts\"\n\n    const schemaString = await Deno.readTextFile(\"./schema.gql\")\n    const schema = buildSchema(schemaString)\n\n    addEventListener(\"fetch\", (event) => {\n      event.respondWith(new Response(\"hello world\"!))\n    })\n```\nWe do this outside of our event listener to prevent this code from running on every request.\n\nLet's write a resolver that will handle our `Note` type. We can just hardcode something to make it easier on ourselves:\n```js\n    import { buildSchema } from \"https://raw.githubusercontent.com/adelsz/graphql-deno/v15.0.0/mod.ts\"\n\n    const schemaString = await Deno.readTextFile(\"./schema.gql\")\n    const schema = buildSchema(schemaString)\n\n    const notes = [\n      {\n        id: \"1\",\n        title: \"Hello deno deploy!\",\n        content: \"This is an example note\"\n      },\n      {\n        id: \"2\",\n        title: \"Hello graphql!\",\n        content: \"This is a different note\"\n      }\n    ]\n    const resolvers = {\n      note: ({ id }) => {\n        return notes.find((note) => note.id === id)\n      }\n    }\n\n    addEventListener(\"fetch\", (event) => {\n      event.respondWith(new Response(schemaString))\n    })\n```\nNotice that `resolvers.note` matches the name of our `Type`. This tells `graphql-deno` how to resolve a `Note` when we query for it.\n\nWe have everything setup now. Let's put it all together!\n\nWe will handle the common case of a `POST` request with a JSON body, specifically with a `query` property that contains our GraphQL query. You can read more about spec-compliant GraphQL over HTTP [here](https://graphql.org/learn/serving-over-http/).\n```js\n    import {\n      buildSchema,\n      graphql\n    } from \"https://raw.githubusercontent.com/adelsz/graphql-deno/v15.0.0/mod.ts\"\n\n    // setup code...\n\n    addEventListener(\"fetch\", async (event) => {\n      const { query } = await event.request.json()\n      const result = await graphql(schema, query, resolvers)\n\n      event.respondWith(new Response(JSON.stringify(result)))\n    })\n```\nFinally, we can send a query and hopefully get a response! You can use whatever HTTP client you like (I use Insomnia) to issue a `POST` request to our server with this request body.\n```json\n    {\n    \t\"query\": \"{ note(id: \\\"1\\\") { title content } }\"\n    }\n```\nOnce you commit and push these changes to your GitHub repo, Deno Deploy should automatically deploy it to your project URL and you can test it live.\n\nHere's the full code:\n```js\n    import {\n      buildSchema,\n      graphql\n    } from \"https://raw.githubusercontent.com/adelsz/graphql-deno/v15.0.0/mod.ts\"\n\n    const schemaString = await Deno.readTextFile(\"./schema.gql\")\n    const schema = buildSchema(schemaString)\n\n    const notes = [\n      {\n        id: \"1\",\n        title: \"Hello deno!\",\n        content: \"This is an example note\"\n      },\n      {\n        id: \"2\",\n        title: \"Hello graphql!\",\n        content: \"This is a different note\"\n      }\n    ]\n    const resolvers = {\n      note: ({ id }) => {\n        return notes.find((note) => note.id === id)\n      }\n    }\n\n    addEventListener(\"fetch\", async (event) => {\n      const { query } = await event.request.json()\n      const result = await graphql(schema, query, resolvers)\n\n      event.respondWith(new Response(JSON.stringify(result)))\n    })\n```\nMy repo is [here](https://github.com/austincrim/simple-deno-gql) and my own Deno GraphQL server is hosted at https://simple-deno-gql.deno.dev.\n\nCongrats! You can now write a GraphQL server in Deno. Bask in your new hypestack.\n"
}