diff --git a/node_modules/@notionhq/client/build/src/Client.js b/node_modules/@notionhq/client/build/src/Client.js
index 924b9b3..bbdaad0 100644
--- a/node_modules/@notionhq/client/build/src/Client.js
+++ b/node_modules/@notionhq/client/build/src/Client.js
@@ -16,7 +16,7 @@ const logging_1 = require("./logging");
 const errors_1 = require("./errors");
 const helpers_1 = require("./helpers");
 const api_endpoints_1 = require("./api-endpoints");
-const node_fetch_1 = require("node-fetch");
+// const node_fetch_1 = require("node-fetch");
 const package_json_1 = require("../package.json");
 class Client {
     constructor(options) {
@@ -257,7 +257,7 @@ class Client {
         __classPrivateFieldSet(this, _Client_prefixUrl, ((_c = options === null || options === void 0 ? void 0 : options.baseUrl) !== null && _c !== void 0 ? _c : "https://api.notion.com") + "/v1/", "f");
         __classPrivateFieldSet(this, _Client_timeoutMs, (_d = options === null || options === void 0 ? void 0 : options.timeoutMs) !== null && _d !== void 0 ? _d : 60000, "f");
         __classPrivateFieldSet(this, _Client_notionVersion, (_e = options === null || options === void 0 ? void 0 : options.notionVersion) !== null && _e !== void 0 ? _e : Client.defaultNotionVersion, "f");
-        __classPrivateFieldSet(this, _Client_fetch, (_f = options === null || options === void 0 ? void 0 : options.fetch) !== null && _f !== void 0 ? _f : node_fetch_1.default, "f");
+        __classPrivateFieldSet(this, _Client_fetch, (_f = options === null || options === void 0 ? void 0 : options.fetch) !== null && _f !== void 0 ? _f : null, "f");
         __classPrivateFieldSet(this, _Client_agent, options === null || options === void 0 ? void 0 : options.agent, "f");
         __classPrivateFieldSet(this, _Client_userAgent, `notionhq-client/${package_json_1.version}`, "f");
     }
@@ -293,12 +293,12 @@ class Client {
             headers["content-type"] = "application/json";
         }
         try {
-            const response = await errors_1.RequestTimeoutError.rejectAfterTimeout(__classPrivateFieldGet(this, _Client_fetch, "f").call(this, url.toString(), {
+            const response = await fetch(url.toString(), {
                 method,
                 headers,
                 body: bodyAsJsonString,
                 agent: __classPrivateFieldGet(this, _Client_agent, "f"),
-            }), __classPrivateFieldGet(this, _Client_timeoutMs, "f"));
+            })
             const responseText = await response.text();
             if (!response.ok) {
                 throw (0, errors_1.buildRequestError)(response, responseText);
