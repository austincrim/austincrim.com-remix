[
  {
    "dateWritten": "2021-04-08T02:30:04.000Z",
    "title": "How I Added Themes to My Website Using Tailwind",
    "lede": "A brief look at my theming workflow",
    "content": "## Background\n\nI recently added theming to my [website](https://austincrim.com) and I wanted to quickly jot down my implementation. I ran into a little friction along the way, but I am really happy with how the result looks and feels. I'm excited about adding even more themes!\\\nA lot of this is based on Tailwind Labs' own [theming video](https://www.youtube.com/watch?v=MAtaT8BZEAo) and I highly encourage you to start there if you are interested in adding themes with Tailwind. All code examples will assume that your project is already integrated with TailwindCSS.\n\n> Note ‚ö†Ô∏è: Most of this article applies to any site, regardless if you use TailwindCSS. If you're not using Tailwind, feel free to read on, you might learn something!\n\n## Overview\n\nThe modern mechanism for theming on the web today is through CSS Custom Properties (aka CSS Variables). They are incredibly flexible and make theming much simpler than it used to be. A basic workflow for adding theme support to a website looks something like this:\n\n1.  define color palettes in CSS variables\n2.  use CSS variables wherever a theme-specific value is needed\n3.  add/remove theme class names in the DOM based on some action (button click, dropdown select, etc.)\n4.  optionally persist a user's preference\n\nIn Tailwind, an extra step is required somewhere in that list: **generating new class names with your `tailwind.config.js`**. Therein lies the rub that makes theming with Tailwind different. I found this process to offer some friction, but being a major TW lover, I persevered in the name of not writing custom CSS classes by hand.\n\n## Defining Your Palette in CSS Variables\n\nThis step honestly contained the bulk of the time spent in my case. I was trying to craft each theme from scratch, so coming up with all of the color values took a decent amount of trial and error.\n\nUsing the [full TailwindCSS color palette](https://tailwindcss.com/docs/customizing-colors#color-palette-reference) as a reference, I copied and pasted RGB values into my CSS variables to preview them on my site. Not the best workflow, but I stuck with it and got a good result. I wanted to stay within Tailwind colors, but unfortunately, I don't know of a way to reference Tailwind colors in a plain CSS file. This resulted in my copy/paste workflow which, in my opinion, was the most painful part of the whole theming process.\n\nAfter finishing a theme, my CSS would look something like this:\n```css\n    .theme-dark {\n        --color-base: 17, 24, 39;                /* gray-900 */\n        --color-text-base: 243, 244, 246;        /* gray-100 */\n        --color-off-base: 31, 41, 55;            /* gray-800 */\n        --color-text-muted: 229, 231, 235;       /* gray-200 */\n        --color-muted-offset: 209, 213, 219;     /* gray-300 */\n        --color-primary: 147, 197, 253;          /* blue-300 */\n        --color-secondary: 96, 165, 250;         /* blue-400 */\n    }\n```\nAs you can see, I attempted to name my variables generically enough to be reusable while maintaining clarity. I have a few base colors for backgrounds and text, as well as offsets, a primary, and a secondary. You can include as many different variables as your theme requires, but I tried to keep it reasonably simple.\n\n## Generating and Using New Theme Classes\n\nOnce you have your themes outlined in CSS variables, you've done the hard bit. Now we are almost to the fun part! To use these dynamic theme colors in Tailwind, you have to generate utility classes using the config file. If you have never tweaked a `tailwind.config.js` file, this step might take some getting used to, but it is fairly straightforward once you have had some practice.\n\nHere's a snippet from my config file:\\\n(For an explanation on the `withOpacity` function, please refer to the Tailwind Labs video linked above.)\n```js\n    function withOpacity(variableName) {\n        return ({ opacityValue }) => {\n            if (opacityValue) {\n                return `rgba(var(${variableName}), ${opacityValue})`;\n            }\n            return `rgb(var(${variableName}))`;\n        };\n    }\n\n    module.exports = {\n       \n       ..., \n       \n       theme: {\n            // we want to extend the current colors instead of replacing them\n            extend: {\n            // this will generate utilities like `bg-base` and `bg-primary`\n                backgroundColor: {\n                    base: withOpacity('--color-base'),\n                    'off-base': withOpacity('--color-off-base'),\n                    primary: withOpacity('--color-primary'),\n                    secondary: withOpacity('--color-secondary'),\n                    muted: withOpacity('--color-text-muted'),\n                },\n            // these classes end up like `text-base` and `text-primary`\n                textColor: {\n                    base: withOpacity('--color-text-base'),\n                    muted: withOpacity('--color-text-muted'),\n                    'muted-offset': withOpacity('--color-muted-offset'),\n                    primary: withOpacity('--color-primary'),\n                    secondary: withOpacity('--color-secondary'),\n                },\n          }\n    }\n```\nSince our utility classes reference CSS variables, their values will respond when we toggle our theme classes. In my example, I only generated utilities for `backgroundColor` and `textColor` specifically. You can generate classes for any applicable properties or generate classes for all color properties using the `theme.extend.colors` key in the config.\\\nNow using these classes is as simple as this:\n```html\n    <span class='theme-dark bg-base text-primary'>\n      Hello Tailwind Themes!\n    </span>\n```\nIt's also important to apply a theme class by default to ensure correct styling on the initial page load. You can also define your base theme on the CSS `:root` selector and those values will take effect by default, without adding any extra classes.\n\n## Switching Themes on the Fly\n\nNow that we have our classes generated and applied, we can start switching themes! This process just consists of toggling different class names on the document. On my website, I show a list of the different available themes and, when one is clicked, I run something like this:\n\n ```js document.documentElement.classList.replace(currentTheme, newTheme);\n```\nHere, I am replacing the current theme class with whatever the user has selected. I'm doing it on the `documentElement` but you can apply this to wherever you want your top-level theme class to live.\n\n> Note ‚ö†Ô∏è: My website uses React, so I track the `currentTheme` in a piece of state. However, this can be done in several ways in vanilla JavaScript, like a global variable or a `data-theme` attribute. The important part is that you swap out the current theme for the user's selection.\n\n## Hanging on to a User's Choice\n\nIf you've made it this far, congrats! You now have fully functioning themes on your site. But you might notice if you select a theme and refresh the page, you've lost your choice! This is where data persistence comes into play. Don't worry, it can be really simple! Here's a look at how my site does it:\n```js\n    function pickTheme(newTheme) {\n        if (newTheme === current) return;\n        document.documentElement.classList.replace(current, newTheme);\n        localStorage.setItem('crimTheme', newTheme);\n        setCurrent(newTheme);\n    }\n```\nThis `pickTheme` function is called when a theme choice is selected.\\\nLet's break it down:\n\n1.  return early if they selected the theme that's currently applied to prevent unnecessary work\n2.  replace the current theme class with the new one\n3.  save the user's choice in browser local storage\n4.  update my current theme state (React style)\n\nThis is a great start! Now when a user selects a new theme, we get it applied to the DOM and then save it to the browser's local storage.\\\nThere is one more step we have to do before the whole experience works smoothly. Currently, even though our theme choice is in local storage, if we refresh the page we don't see any difference. On page load, we need to check local storage and get the theme applied right away, before the user sees the default theme. Here's what I did:\n```js\n    // theme.js\n    if (localStorage.crimTheme) {\n        document.documentElement.classList.add(localStorage.crimTheme);\n    } else {\n        document.documentElement.classList.add('theme-light');\n        localStorage.setItem('crimTheme', 'theme-light');\n    }\n```\nNot too bad! We first check local storage for our theme and apply it if it exists. If not, we set them up with the default theme. I load this `theme.js` file directly in my `index.html` to ensure it runs early enough to prevent flashes.\n\n## Conclusion üéâ\n\nBig kudos to you if you made it this far. We have accomplished a lot!\\\nLet's review:\n\n1.  We set up our themes with CSS variables\n2.  We generated custom Tailwind classes to apply our CSS variable values\n3.  We allowed users to swap themes by updating our theme class in the DOM\n4.  Finally, we boosted the user experience by saving and retrieving a user's theme preference in local storage\n\nTheming adds a lot of personality to sites and I hope to see more of it in the future. Reach out and show me your themed sites!\n"
  },
  {
    "dateWritten": "2021-05-11T02:29:18.000Z",
    "title": "AWS CDK with Go: Hello World",
    "lede": "A quickstart and some things to watch out for when using the AWS Cloud Development Kit for Go",
    "content": "## Background\n\nI recently started exploring the AWS CDK using Go. The Go CDK library is currently in Developer Preview, meaning the APIs are subject to change and it should not be used in production. However, it should be used to experiment and provide feedback to AWS!\\\nI wanted to spin up a simple Lambda fronted by API Gateway to create an HTTP API, a very common use case. I have pasted the full source of both the CDK and the Lambda handler below.\n```go\n    // lib/cdk.go\n    package main\n\n    import (\n    \t\"os\"\n\n    \t\"github.com/aws/aws-cdk-go/awscdk\"\n    \t\"github.com/aws/aws-cdk-go/awscdk/awsapigatewayv2\"\n    \t\"github.com/aws/aws-cdk-go/awscdk/awsapigatewayv2integrations\"\n    \t\"github.com/aws/aws-cdk-go/awscdk/awslambda\"\n    \t\"github.com/aws/constructs-go/constructs/v3\"\n    \t\"github.com/aws/jsii-runtime-go\"\n    )\n\n    type GoCdkStackProps struct {\n    \tawscdk.StackProps\n    }\n\n    func NewGoCdkStack(scope constructs.Construct, id string, props *GoCdkStackProps) awscdk.Stack {\n    \tvar sprops awscdk.StackProps\n    \tif props != nil {\n    \t\tsprops = props.StackProps\n    \t}\n    \tstack := awscdk.NewStack(scope, &id, &sprops)\n\n    \t// The code that defines your stack goes here\n\n    \tfunction := awslambda.NewFunction(stack, jsii.String(\"gofunction\"), &awslambda.FunctionProps{\n    \t\tFunctionName: jsii.String(\"hellogo\"),\n    \t\tCode:         awslambda.AssetCode_FromAsset(jsii.String(\"../handler\"), nil),\n    \t\tHandler:      jsii.String(\"handler\"),\n    \t\tRuntime:      awslambda.Runtime_GO_1_X(),\n    \t})\n\n    \tintegration := awsapigatewayv2integrations.NewLambdaProxyIntegration(&awsapigatewayv2integrations.LambdaProxyIntegrationProps{\n    \t\tHandler:              function,\n    \t\tPayloadFormatVersion: awsapigatewayv2.PayloadFormatVersion_VERSION_1_0(),\n    \t})\n\n    \tapi := awsapigatewayv2.NewHttpApi(stack, jsii.String(\"goapi\"), &awsapigatewayv2.HttpApiProps{\n    \t\tApiName: jsii.String(\"hellogoapi\"),\n    \t})\n\n    \tapi.AddRoutes(&awsapigatewayv2.AddRoutesOptions{\n    \t\tPath:        jsii.String(\"/\"),\n    \t\tIntegration: integration,\n    \t})\n\n    \treturn stack\n    }\n\n    func main() {\n    \tapp := awscdk.NewApp(nil)\n\n    \tNewGoCdkStack(app, \"GoCdkStack\", &GoCdkStackProps{\n    \t\tawscdk.StackProps{\n    \t\t\tStackName: jsii.String(\"GoCDKStack\"),\n    \t\t\tEnv:       env(),\n    \t\t},\n    \t})\n\n    \tapp.Synth(nil)\n    }\n\n    // env determines the AWS environment (account+region) in which our stack is to\n    // be deployed. For more information see: https://docs.aws.amazon.com/cdk/latest/guide/environments.html\n    func env() *awscdk.Environment {\n    \treturn &awscdk.Environment{\n    \t\tAccount: jsii.String(os.Getenv(\"CDK_DEFAULT_ACCOUNT\")),\n    \t\tRegion:  jsii.String(os.Getenv(\"CDK_DEFAULT_REGION\")),\n    \t}\n    }\n```\n```go\n    // handler/main.go\n    package main\n\n    import (\n    \t\"context\"\n    \t\"fmt\"\n\n    \t\"github.com/aws/aws-lambda-go/events\"\n    \t\"github.com/aws/aws-lambda-go/lambda\"\n    )\n\n    func HandleRequest(ctx context.Context, request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n    \tname := request.QueryStringParameters[\"name\"]\n    \tif name == \"\" {\n    \t\tname = \"Friend\"\n    \t}\n    \treturn events.APIGatewayProxyResponse{Body: fmt.Sprintf(\"Hello, %s!\", name), StatusCode: 200}, nil\n    }\n\n    func main() {\n    \tlambda.Start(HandleRequest)\n    }\n```\nAllow me to highlight a few concepts that tripped me up.\n\n### Finding the Go CDK packages\n\nSince the CDK bindings for Go are currently in developer preview, the documentation is not quite as fleshed out as the other supported languages. This made getting started a little hairy. In the end I found most of what I needed [here](https://docs.aws.amazon.com/cdk/api/v2/docs/aws-construct-library.html), after selecting the v2 release candidate from the menu in the top right.\\\nOne major benefit of CDK 2.0 is having all the various packages under a single namespace. This makes it trivial to grab more dependencies as you go, simply changing the last node of your import statements.\n\n### jsii.String()?\n\nMost examples of Go CDK that I found on AWS' docs included calls to `jsii.String()` or similar. This call has to wrap any literal data types that you wish to pass, such as string or integer primitives. All construct options structs take pointers, even for things like strings or integers. This is because Go does not natively support optional struct fields. `jsii.String()` will automatically provide a pointer to your string literal value, this allows for a `nil` pointer to be used for optional fields that you choose not to provide.\n\n### Specifying a Lambda Handler  \n```go\nawslambda.NewFunction(stack, jsii.String(\"gofunction\"), &awslambda.FunctionProps{\n  ...\n  Handler:      jsii.String(\"handler\"),\n  ...\n})\n```\nThis option took me the longest to figure out and partially inspired me to write this post. When specifying the `Handler` option of a new Lambda function, you specify the **name of the executable file generated by `go build`**. So in my scenario, I have a folder named **handler** that contains a **main.go** file. When built, this creates a **handler** executable. This is what needs to go in the `Handler` struct field.\\\nAnother important note, when building your executable, **you have to run `GOOS=linux go build`** or the Windows equivalent. This tells the Go cli to build an executable for the Linux OS which is where your Lambda will actually run. If you don't do this, you will get a runtime error when executing your lambda.\n\nThat wraps it up for this post, let me know if you run into any other common issues I could add!\n"
  },
  {
    "dateWritten": "2020-06-23T00:44:01.000Z",
    "title": "Recreating the macOS Mail User Interface",
    "lede": "A faithful mockup of the Big Sur macOS Mail application, whipped up in an evening using TailwindCSS",
    "content": "After seeing the design of the newly announced macOS, Big Sur, I decided to try to remake the user interface of the macOS Mail app. I used TailwindCSS and Heroicons by Steve Schoeger to help me along.\n\nCheck it out [here](https://big-sur-mail.vercel.app) (not mobile friendly) and look at the source [here](https://github.com/austincrim/quick-design-projects/tree/master/big-sur-mail).\n\nLet me know what you think!\n"
  },
  {
    "dateWritten": "2021-10-05T02:25:26.000Z",
    "title": "Building a Graphql Server on Deno Deploy",
    "lede": "Combining two hot technologies to create a hypestack application",
    "content": "**Prerequisites**\n\n1.  [Install Deno](https://deno.land/#installation)\n2.  [Sign Up for Deno Deploy](https://deno.com/deploy/)\n3.  [Install `deployctl` (optional, allows you to run your app locally)](https://deno.com/deploy/docs/deployctl/)\n4.  Create and clone a GitHub repo to house our project (this is allows us to easily deploy to Deno Deploy)\n\n### Up and running on Deno Deploy\n\nLet's start by creating the simplest Deno Deploy project by creating an `index.js` (or `.ts`) file in our repo and adding a fetch event listener.\n```js\n    addEventListener(\"fetch\", (event) => {\n      event.respondWith(new Response(\"hello world!\"))\n    })\n```\nIf you want to run this locally with hot reloading:\n```bash\n    deployctl run --watch index.js\n```\nTo get this deployed:\n\n1.  head to https://deno.com/deploy\n2.  sign in with github\n3.  select \"Create new project\" and choose a name\n4.  select \"Connect to GitHub\" near the bottom of the page\n5.  enter the exact URL **to your `index.js` file.** e.g `https://github.com/austincrim/simple-deno-gql/blob/main/index.js`\n\nCongrats! If you visit the URL provided on your project page, you should see \"hello world\".\n\n### Adding GraphQL\n\nNext, let's write a basic GraphQL schema file:\n```graphql\n    \"\"\"\n    schema.gql\n    \"\"\"\n    type Note {\n       id: String\n       title: String\n       content: String\n    }\n\n    type Query {\n       note(id: String): Note\n    }\n```\nNow we can bring in `graphql-deno` to parse our schema file. This library is a Deno-compatible port of [GraphQL.js](https://github.com/graphql/graphql-js).\n```js\n    import { buildSchema } from \"https://raw.githubusercontent.com/adelsz/graphql-deno/v15.0.0/mod.ts\"\n\n    const schemaString = await Deno.readTextFile(\"./schema.gql\")\n    const schema = buildSchema(schemaString)\n\n    addEventListener(\"fetch\", (event) => {\n      event.respondWith(new Response(\"hello world\"!))\n    })\n```\nWe do this outside of our event listener to prevent this code from running on every request.\n\nLet's write a resolver that will handle our `Note` type. We can just hardcode something to make it easier on ourselves:\n```js\n    import { buildSchema } from \"https://raw.githubusercontent.com/adelsz/graphql-deno/v15.0.0/mod.ts\"\n\n    const schemaString = await Deno.readTextFile(\"./schema.gql\")\n    const schema = buildSchema(schemaString)\n\n    const notes = [\n      {\n        id: \"1\",\n        title: \"Hello deno deploy!\",\n        content: \"This is an example note\"\n      },\n      {\n        id: \"2\",\n        title: \"Hello graphql!\",\n        content: \"This is a different note\"\n      }\n    ]\n    const resolvers = {\n      note: ({ id }) => {\n        return notes.find((note) => note.id === id)\n      }\n    }\n\n    addEventListener(\"fetch\", (event) => {\n      event.respondWith(new Response(schemaString))\n    })\n```\nNotice that `resolvers.note` matches the name of our `Type`. This tells `graphql-deno` how to resolve a `Note` when we query for it.\n\nWe have everything setup now. Let's put it all together!\n\nWe will handle the common case of a `POST` request with a JSON body, specifically with a `query` property that contains our GraphQL query. You can read more about spec-compliant GraphQL over HTTP [here](https://graphql.org/learn/serving-over-http/).\n```js\n    import {\n      buildSchema,\n      graphql\n    } from \"https://raw.githubusercontent.com/adelsz/graphql-deno/v15.0.0/mod.ts\"\n\n    // setup code...\n\n    addEventListener(\"fetch\", async (event) => {\n      const { query } = await event.request.json()\n      const result = await graphql(schema, query, resolvers)\n\n      event.respondWith(new Response(JSON.stringify(result)))\n    })\n```\nFinally, we can send a query and hopefully get a response! You can use whatever HTTP client you like (I use Insomnia) to issue a `POST` request to our server with this request body.\n```json\n    {\n    \t\"query\": \"{ note(id: \\\"1\\\") { title content } }\"\n    }\n```\nOnce you commit and push these changes to your GitHub repo, Deno Deploy should automatically deploy it to your project URL and you can test it live.\n\nHere's the full code:\n```js\n    import {\n      buildSchema,\n      graphql\n    } from \"https://raw.githubusercontent.com/adelsz/graphql-deno/v15.0.0/mod.ts\"\n\n    const schemaString = await Deno.readTextFile(\"./schema.gql\")\n    const schema = buildSchema(schemaString)\n\n    const notes = [\n      {\n        id: \"1\",\n        title: \"Hello deno!\",\n        content: \"This is an example note\"\n      },\n      {\n        id: \"2\",\n        title: \"Hello graphql!\",\n        content: \"This is a different note\"\n      }\n    ]\n    const resolvers = {\n      note: ({ id }) => {\n        return notes.find((note) => note.id === id)\n      }\n    }\n\n    addEventListener(\"fetch\", async (event) => {\n      const { query } = await event.request.json()\n      const result = await graphql(schema, query, resolvers)\n\n      event.respondWith(new Response(JSON.stringify(result)))\n    })\n```\nMy repo is [here](https://github.com/austincrim/simple-deno-gql) and my own Deno GraphQL server is hosted at https://simple-deno-gql.deno.dev.\n\nCongrats! You can now write a GraphQL server in Deno. Bask in your new hypestack.\n"
  },
  {
    "dateWritten": "2021-02-01T02:31:54.000Z",
    "title": "Building Notarize üìì: a simple note-taking experience",
    "lede": "The process of building a note-taking app and my first experience with implementing authentication",
    "content": "### What I Built\n\n[Notarize](https://notarize-react.vercel.app) is simplistic take on a Markdown note taking app. It allows you to login with GitHub and immediately start taking notes. Notarize supports Markdown, basic search functionality, and note downloading, all through a simple UI that strives to blend in while you focus on writing.\n\n![notarize homescreen](https://cdn.hashnode.com/res/hashnode/image/upload/v1612320848869/b2FSFLThc.png)\n\n### Why I Built It\n\nA note taking app intrigued me for a couple of reasons. First, I knew it was an attainable goal in the short time I had to develop. I aimed to keep the UI and functionality basic, to ensure I ended up with a finished product with a fair amount of polish. Secondly, note taking apps are practical! I always find myself needed to jot things down quickly and I wanted a minimal app that could be there for me when I needed it. Lastly, I wanted to pick a project where I had to implement authentication. I have never implemented an authentication flow on my own and I felt it was time for that challenge.\n\n### What Tools I Used\n\nNotarize is a Next.js application hosted on Vercel. I used [react-query](https://react-query.tanstack.com/) for data fetching, which is an incredible tool that simplifies caching server-side state in your React app. I took advantage of [Prisma](https://www.prisma.io/) and [Postgres on Heroku](https://www.heroku.com/postgres) for data persistence, tied in with [Next-Auth](https://next-auth.js.org/) for the GitHub login flow. All styling was handled by my trusty friend, [TailwindCSS](https://tailwindcss.com/). Overall, I immensely enjoyed working in this stack. The combination of react-query, Next.js API routes, and Prisma made data persistence and caching a piece of cake and, thanks to TypeScript, I had the convenience of type checking up and down the stack. One challenge I faced was authentication. Having never tackled it on my own, to say I was intimidated is an understatement. Thankfully, Next-Auth helped make my first experience less painful. Its API is simple and the docs are fairly straightforward, and, as an added bonus, it integrates nicely with Prisma for handling users and sessions.\n\n![example of adding a note](https://cdn.hashnode.com/res/hashnode/image/upload/v1612322376782/dWmivfbLw.gif)\n\n### The Future\n\nDuring the development of Notarize, I started compiling a list of future features that I would love to implement! Here's just a few that are on my roadmap:\n\n*   Improved Markdown editor\n*   Fall back to local storage when network is not available\n*   Optimistic UI updates\n*   Dark Mode üåó\n\n### Wrapping Up\n\nAll told, I had an absolute blast during the Vercel/Hashnode Hackathon. It was a great chance to flex my dev muscles and learn some new skills. Big shout out to Vercel and Hashnode for putting it on!\n\n### Usage Note\n\nYour GitHub account must have a publicly accessible email for the app to work correctly. Go to Github -> Settings -> Select a public email. I hope to fix this in the near future.\n"
  },
  {
    "dateWritten": "2021-06-01T02:28:12.000Z",
    "title": "COBOL'in üèÄ: What a 60-year-old language taught me about JavaScript",
    "lede": "How my experience as a mainframe developer helps shape my JavaScript code",
    "content": "Hey, I'm Austin, and I started my career a few years ago as a 20-year-old COBOL developer.\n\nI can already hear the questions:\n\n> Why would you subject yourself to that? Why not something relevant? What the heck is COBOL?\n\nCOmmon Business Oriented Language is a programming language that showed up in the late 1950s. It saw widespread adoption throughout many large companies and was usually employed for large-scale batch processing. Although it's over 60 years old, it is [surprisingly common today](https://www.zdnet.com/article/cobol-turns-60-why-it-will-outlive-us-all/). More recently, it got some [time in the news](https://www.wired.com/story/cant-file-unemployment-dont-blame-cobol) when the governor of New Jersey made a public plea for COBOL developers to rescue the state unemployment system.\n\nMy COBOL story starts with my father who, after I finished high school, advised me to look into learning COBOL. He was a mainframe developer at a large university for almost the entirety of his career and with many of his contemporaries retiring, he knew that the amount of COBOL code still running would need maintainers with a specific set of skills (insert Liam Neeson gif). Unfortunately, I had to admit he was right. I landed a job as a mainframe engineer after just 18 months in school and started my career path in 2018 using technology from the 1950s.\n\nI only spent a couple of years in that role before I transitioned to a team using a more modern stack and even though I now use things like React and Node every day, I have carried over some of the lessons I learned on the green screens.\n\nLet's take a look at 3 ways that writing COBOL has made me a better web developer.\n\n## Requiring Readability üìö\n\nCOBOL was designed to be readable by default. Its syntax is intentionally English-like in nature, with statements ending in periods and grouped by 'paragraphs'. Here's an example:\n\n    MOVE 5 TO NUM.\n    ADD 10 TO NUM.\n    PERFORM UNTIL NUM LESS THAN 10\n      DISPLAY NUM\n      SUBTRACT 1 FROM NUM\n    END PERFORM.\n\nWhile admittedly verbose, it's also free of arcane symbols or abbreviations. Its verbosity is a side effect of its explicitness. Now, I'm not going to say that programming languages need to be designed this way in order to be readable, in fact, even COBOL can't *enforce* readable code, it can only encourage it. But this general notion of readability as a first-class idea leads me to my first point: **prioritizing readability pays off**.\n\nWe do a lot in the developer world in the name of readability. Everything from syntax highlighting and code formatters to abstractions like classes and functions improves our ability to quickly scan and reason about our code. So much time is spent in this realm because we have realized that **readability leads to maintainability**. Code that's hard to read is hard to understand, if it's hard to understand, it's hard to fix bugs and add features.\n\nHere are some quick hitters on how to improve the readability of your code:\n\n1.  In general, avoid abbreviations when naming things. They oftn mk ur cod hrdr to read :).\n2.  Make purity and immutability the default. Functions that reach outside their scope and variables that unexpectedly change are common sources of confusion in codebases. Do your best to avoid these techniques when practical.\n3.  Keep functions small, without being dogmatic. It stands to reason that less code is easier to read than more code. Extracting another function costs very little, but can make a big difference in the long run. See more in the next section üëÄ.\n\nOne caveat that should go without saying, there are scenarios where you have to choose something like performance over readability, but when I write code I first ask myself \"Is this readable?\" before I try to optimize for anything else.\n\n## Function Focused üßê\n\nCOBOL has no scope. If you declare a variable, it is for all intents and purposes, global, even if COBOL'ers wouldn't use that word. COBOL also doesn't have functions. It is *procedural*, not functional or object-oriented ([sorta](https://www.ibm.com/docs/en/cobol-zos/4.2?topic=programs-writing-object-oriented)).\\\nA COBOL program is essentially a long list of instructions that get processed in a sequence. The way we organize these instructions in COBOL is with *paragraphs*. A paragraph is a named grouping of instructions, like this:\n\n    COMPUTE-TOTAL.\n        MULTIPLY TAX-RATE BY SUBTOTAL GIVING TAX.\n        ADD SUBTOTAL TO TAX GIVING TOTAL.\n        SUBTRACT DISCOUNT FROM TOTAL.\n\nWith our paragraph defined, we can then execute it whenever we want with the `PERFORM` keyword.\n\n    PERFORM COMPUTE-TOTAL.\n\nSince COBOL has no scope and no functions, it quickly becomes apparent that the frequent use of paragraphs is imperative to maintaining a halfway-decent codebase. Many teams even develop style guides with rules like:\n\n*   All code must be in a paragraph\n*   Paragraphs must be named clearly\n*   Paragraphs should have one primary responsibility\n\nIf these ideas around paragraphs sound familiar it's because many JavaScript developers talk similarly about *functions*.\n\nFunctional programming in JavaScript has become somewhat in vogue as of late and for good reason! If you're like me, you might have thought you hated programming when you were in Java class and got yet another `NullPointerException` trying to write a tip calculator. But pure functions offer a much clearer mental model: dump values in, get values out, consistently.\\\nSmall, pure functions are the easiest to test, read, and maintain, so why not try to build your whole codebase out of such functions? Even COBOL, without the first-class notion of a function, understood code that can be grouped and reused is paramount to building applications for the long haul.\n\n## Talking Testing üß™\n\nUp to this point, my comments on COBOL have been mostly positive, but that's about to change. The biggest hurdle in my time as a mainframe dev was *testing my code*. By their very nature, most COBOL codebases are supporting old, long-running processes and applications. They are often products of many different developers making changes over decades and, due to the lack of tooling, the resulting code is not easy to test. Impact analysis and unit testing were by far the most time-consuming tasks in any feature request or bugfix. There is rarely a path forward on how to execute your program under certain conditions or identifying what parts of the codebase your change might negatively affect.\n\nAgain, I mainly attribute this to the lack of sophisticated tooling and it brings me to my final point, *automated testing in JavaScript is a gift*.\n\nTo the chagrin of some, the JavaScript ecosystem has an embarrassment of riches when it comes to choice. There is an NPM package for checking if a number is even, for goodness sakes. Search NPM for \"testing\" and you get back 14,534 results. The point is you can write tests in just about any way imaginable; the barrier to entry has never been lower. Having an automated test suite in place skyrockets developers' confidence, encourages frequent refactors, and can singlehandedly change the future of a given application.\\\nThere are umpteen resources out there telling you why testing is important, so I will stop preaching here, but I will offer up a couple thoughts on getting started.\n\n1.  Focus on the highest value, lowest friction tests first. End-to-end web tests using something like Cypress is a great way to ensure the main functionality of your app is working before you get to production.\n2.  Run tests automatically and frequently. Whether in continuous integration or a git hook, make sure your feedback loop is short and you get informed of test failures at the right times.\n3.  Kent C. Dodds puts it best: \"The more your tests resemble the way your software is used, the more confidence they can give you.\"\n\n## Closing Comments üö™\n\nWhen COBOL was released in the 1950s, programmers wanted to write resilient applications that solved problems and while our tools have changed dramatically, I would argue our goals mostly remain the same. Frameworks and languages come and go at a breakneck speed, but if we can glean principles from those who came before us, our knowledge will stand the erosion of time, not unlike a lot of COBOL code still running today.\n\nThanks for your time.\n"
  },
  {
    "dateWritten": "2020-06-30T00:42:24.000Z",
    "title": "Quick CSS Transition Explainer",
    "lede": "Everything you need to get up and running with simple CSS transition, explained through an embedded CodePen",
    "content": "CSS transitions are easy to use and add that final touch of polish to a UI. I love transitions and they make a site look more professional when used correctly. They were a little confusing at first for me, so I decided to whip up a quick CodePen showing how transitions are written.\n\nTransitions are used to smoothly transition from one style to another. Here's an example using a button with hover and active states.\n\nSee the Pen [CSS Transition Example](https://codepen.io/austincrim/pen/rNxYMxa) by austincrim ([@austincrim](https://codepen.io/austincrim)) on [CodePen](https://codepen.io).\n\nThanks for reading!\n"
  },
  {
    "dateWritten": "2021-08-13T02:26:12.000Z",
    "title": "It Might Be Time to Stop Checking Your Site's Bundle Size",
    "lede": "Taking a look at when performance might not matter",
    "content": "Now that you are here ready to berate me for the irresponsible advice in my title, first, my site does not have comments, so joke's on you, and second, I think you will find the thrust of the article less inflammatory than my clickbait-adjacent title might have led you to believe.\n\nSo put down your virtual pitchforks, read to the end, and then send me your scathing critiques if you still feel they are necessary.\n\n## Caveats\n\nWeb performance is a critical part of making content broadly accessible, especially to those in under-served areas with low bandwidth or limited internet access. I think, in general, the ecosystem has not emphasized progressive enhancement enough and has funneled us towards shipping [bloated JavaScript bundles](https://twitter.com/n_moore/status/1415067187446960129?s=20) to sites that often do not need any JavaScript at all.\n\nThere has been no shortage of ink spilled on this problem but my article is not about that.\n\nI want to talk about **shipping stuff**.\n\n## A Story\n\nMy most recent public project, [Perusing the Platform](https://perusingtheplatform.com), started with humble enough origins. I happened upon the Mozilla Developer Network documentation about the Web Notification API and, eventually, found their page listing every native Web API available. I was blown away at all the goodies tucked away under the `window` and `navigator` objects; notifications, audio processing, file system access, window-to-window communication, the list went on. Wow! I could learn this stuff and create a resource to help others discover it: the birth of a new side project.\n\nBut soon after, the associated new project dread set in.\n\nWhat tech stack should I choose?\n\nWhat will it be named?\n\nHow will I design it?\n\nCSS strategy?\n\nHosting provider?\n\nContent management system?\n\nNot to mention: how will it perform?\n\nYou get the idea.\n\nI knew I could build something rather quickly using Next.js but I had just read a tweet about how it ships big JavaScript bundles to totally static pages. That sounds bad! What if my project hits the big time and I get Twitter-shamed for my kilobyte count?\n\nThese questions can be paralyzing and they led me to postpone my exciting new project idea for several weeks. I even finished building a prototype (complete with my first article) and ended up scrapping it, in part because of (web) performance anxiety.\n\n## On Shipping\n\nI'm happy to say that I did eventually push \"deploy\" on Perusing the Platform and, while it is in its infancy, I'm proud of what I have accomplished so far and I look forward pouring in more content, but the above story serves to illustrate a greater point: **putting something out into the public is scary**. There are already enough considerations when creating something without the threatening stocks of internet humiliation and the many all-to-willing tomato-throwers.\n\nWhen the [Agile methodology](https://en.wikipedia.org/wiki/Agile_software_development) of software development came along and disrupted the industry (for better or worse), it popularized the concept of iteration and early feedback being more desirable than meticulous, up-front planning. While this has been easy for me to contextualize with \"feature work\", I seem to forget this principle as it relates to things like performance, accessibility, and even content like this blog post. These things can be iterated on just like \"regular\", everyday feature work! It can be tempting to view performance in a \"waterfall planning\" mode, where you want to get everything right once and then check the \"performance\" box of you to-do list, but this is impractical. There's an old adage: *software is never finished*, and it stands to reason that the composite parts of piece of software will also be in constant flux.\n\nSo, performance is iterative in nature, but it's also *contextual*. The performance requirements of a federal government website are different than those of your 11th to-do list side project that only you will see. If I'm making a photo album web app for my mom down the street who has a gigabit connection and the latest iPhone, I should not be sweating over kilobytes and network requests. Still, the requirements of your app and the needs of your user base can only be fully known if you *actually ship something*.\n\nIn closing, here is my request: don't be afraid to send out your buggy, slow code. Put it out there in all of its bloated, un-optimized glory.\n\nBy all means, iterate, improve, and make your stuff broadly accessible when the time comes, but a shipped project with a 5mb bundle is infinitely more valuable than a potentially golden idea relegated to the side project graveyard.\n"
  },
  {
    "dateWritten": "2021-07-06T02:27:13.000Z",
    "title": "JavaScript Dev Does Rust: Statements, expressions, and return values",
    "lede": "I have started to dip my toes into Rust-land and I will be jotting done some of my aha's and gotchas, like this example!",
    "content": "In Rust, a **statement** is a piece of code that does not return a value and always ends with a semicolon\n```rust\nlet x = 12;\n\nprintln!(\"x is {}\", x);\n```rust\nAn **expression** is code that evaluates to something. Most Rust code contains expressions.\n```rust\nlet y = 2 + 2;  // 2 + 2 is an expression within a statement\n\ndo_something()  // do_something() is an expression the returns a value\n```\nThis distinction is important, especially when reading functions. It might not be obvious what this function is returning at first glance. A function's return value can be the **last expression evaluated** by body of the function.\n```rust\nfn sum_and_double(x: i32, y: i32) -> i32 {\n    let summed = x + y;\n    summed * 2  // since this is the last expression, it is implicitly returned\n}\n```\n`summed * 2` is the last expression so it evaluates and returns that value from the function. This would break if we added a semicolon because that would turn the line into a statement.\n\nThis code would result in a compiler error for mismatched types because we are not returning an `i32`, we are returning nothing!\n```rust\nfn sum_and_double(x: i32, y: i32) -> i32 {\n    let summed = x + y;\n    summed * 2;  // Compiler error! This is now a statement and nothing gets returned from the function!\n}\n```\nYou can explicitly use the `return` keyword in functions, which is required for returning early, but the implicit return is a de facto standard and you will see it everywhere.\n\nPay attention to the semicolons!\n"
  },
  {
    "dateWritten": "2020-05-28T09:43:16.000Z",
    "title": "Rebuilding My Personal Site with Next.js and TailwindCSS",
    "lede": "The process and lessons learned from another portfolio rebuild. Tech stack talk and code snippets included",
    "content": "## Background\n\nAfter publishing the first iteration of my personal website around a year ago, I grew tired of the design and wanted to explore the new technologies I had been learning. My old site was written in plain HTML and CSS using the Bootstrap 4 framework. This was a great exercise at the time and it taught me some important lessons about CSS and design in general, but it was time for change.\n\nHere is what my old site looked like: [Old Website](https://austincrim.me). And this is the new and improved version: [New Website](https://portfolio.austcrim.now.sh).\n\n## The New Stack\n\nMy new portfolio site is built using [Next.js](https://nextjs.org/) and [TailwindCSS](https://tailwindcss.com/). I love both of these technologies and their developer experience is top notch. I definitely recommend checking out these frameworks if you're interested in React or CSS.\n\n### Using Next.js\n\nCurrently, my portfolio site is a single page, statically generated by Next. It reads in data at build time to create the HTML, allowing the server to respond with static HTML for fast rendering. Here's how easy it is to get data at build time:\n```js\n    // index.js\n    export async function getStaticProps() {\n        const { skills } = JSON.parse(\n            fs.readFileSync(path.join(process.cwd(), 'data/skills.json'))\n        );\n        const { projects } = JSON.parse(\n            fs.readFileSync(path.join(process.cwd(), 'data/projects.json'))\n        );\n        return {\n            props: {\n                skills,\n                projects,\n            },\n        };\n    }\n```\nI can then access this data in my homepage like this:\n```js\n    // index.js\n    const Index = ({ skills, projects }) => (\n        {\n            skills.map((skill, index) => (\n                <SkillCard\n                    title={skill.title}\n                    image={skill.imagePath}\n                    alt={skill.alt}\n                    key={index}\n                />\n            ))\n        }\n    )\n```\nIn my case, I'm reading files to get my data, but you could do any kind of data fetching here: API calls, database queries, you name it. You can read more about SSG (static site generation) [here](https://nextjs.org/blog/next-9-3#next-gen-static-site-generation-ssg-support).\n\n### Using Tailwind\n\nI have been an huge fan of Tailwind ever since I discovered it. I find the utility-first workflow helps me move faster as a developer and the built-in classes allow me to produce more consistent, intentional designs. I was wary of Tailwind when I first read about it and it does come with trade-offs, but I was hooked after the first time I actually used it to build something. I would encourage anyone interested in Tailwind to give it a try before forming strong opinions.\n\n### Future Plans\n\nWhile I am happy with how my new design turned out, I have some future additions I wish to make. I want to further my knowledge of Next.js by adding a blog, complete with a built-in Markdown editor for posts. I also need to transition the new website to my preferred domain: austincrim.me. The last thing on my backlog is a fan-favorite: dark mode.\n\nThe source for my portfolio site can be found [here](https://github.com/austincrim/next-personal-site).\n\nThanks for reading and feel free to offer feedback or comments!\n"
  },
  {
    "dateWritten": "2021-12-11T09:52:46.000Z",
    "title": "Rust ‚ù§Ô∏è JavaScript",
    "lede": "Learn how to run Rust functions from your JavaScript code using the new hotness, WASM",
    "content": "## What's Wasm?\n\nWebAssembly (WASM for short) is a \"binary instruction format\" that can run natively in your browser, making it just the fourth language to claim that title, joining HTML, CSS, and JavaScript.\n\nHowever, WASM is not something that most of us will want to write by hand; that's why it was intended as a compilation target for other programming languages. The goal is to write in your favorite compiled language and then output a `.wasm` module that can be directly executed in the browser (or Deno and Node!).\n\nThis is a pretty big deal!\n\nWebAssembly modules are often used for cross-platform mobility or to off-load intensive computations away from JavaScript to a better-suited language.\n\nLet's write and run our first WebAssembly module using Rust and [`wasm-pack`](https://rustwasm.github.io/docs/wasm-pack/introduction.html).\n\n## Prerequisites\n\n1. Install Rust and Cargo\n\n   - **For macOS, Linux**\n\n     ```bash\n     curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n     ```\n\n   - **For Windows**\n\n     [rustup-init.exe](https://static.rust-lang.org/rustup/dist/i686-pc-windows-gnu/rustup-init.exe)\n\n1. Install `wasm-pack`\n\n   ```bash\n   cargo install wasm-pack\n   ```\n\n## Scaffolding a Project Using Cargo\n\nAfter ensuring you have Rust, Cargo, and `wasm-pack` installed, let's create a new Rust project with Cargo.\n\n```bash\ncargo new --lib hello-wasm\n```\n\nThis command scaffolds a new Rust library in the `hello-wasm` directory. Cargo provides us with a `src/lib.rs` file and a `Cargo.toml` (think `package.json` equivalent). `lib.rs` will contain a boilerplate Rust unit test, we can go ahead and delete everything in this file.\n\n## Using `wasm-bindgen` and `wasm-pack` to Compile Rust Functions to WASM\n\nNext, let's get our `Cargo.toml` set up.\n\n```toml\n[package]\nname = \"hello-wasm\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[lib]\ncrate-type = [\"cdylib\"]\n\n[dependencies]\nwasm-bindgen = \"0.2\"\n```\n\nWe need to add two things here: the `[lib]` section and the `wasm-bindgen` dependency.\n\nThe `[lib].crate-type` directive helps tip off Cargo that we might be building for a WASM target and helps it pass the correct flags when we do so.\n\nYou will see where we use `wasm-bindgen` in a second, but it's a key library that enables the translation between Rust types and JavaScript types, among other things. You can read more about the specifics in [their docs](https://rustwasm.github.io/wasm-bindgen/).\n\nWith our `Cargo.toml` in order, let's open up `src/lib.rs` and write some Rust code.\n\nUsing the `wasm-bindgen` attribute, we will write an `add` function that simply returns the sum of two integers.\n\n```rust\n// lib.rs\nuse wasm_bindgen::prelude::*;\n\n#[wasm_bindgen]\npub fn add(a: i32, b: i32) -> i32 {\n    a + b\n}\n```\n\nNow that our Rust code is in place, we will use `wasm-pack` to compile our Rust into consumable WASM.\n\n```bash\nwasm-pack build --target web\n```\n\nYou should see a new `pkg` directory with our `.wasm` module, a `.js` wrapper, and some other sundry files. Feel free to poke around to satisfy any curiosities.\n\nWith our built artifacts, we are ready to run WASM from the browser!\n\n## Importing and Calling WASM Functions from JavaScript\n\nIn the same `hello-wasm` directory, create a humble `index.html` and add an inline `<script type=\"module\">` in the `<head>`.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Hello Wasm!</title>\n    <script type=\"module\"></script>\n  </head>\n  <body></body>\n</html>\n```\n\nNext, we can import both the default export (I call it `init`) and our `add` function from the light JavaScript wrapper that was generated by `wasm-pack`. `wasm-pack` automatically adds a default export that is essentially glue code to load and instantiate our WASM module.\n\n**It's critical that you call this default export before using the `add` function.**\n\nThen, we can call our `add` function and log the result.\n\n> `wasm-pack` generates `.d.ts` files by default. Depending on your tooling setup, this gives you autocomplete and type checking for our WASM functions ü§Ø.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Hello Wasm!</title>\n    <script type=\"module\">\n      import init, { add } from './pkg/hello_wasm.js'\n\n      await init() // this loads and instantiates our WASM module\n      console.log(add(1, 2)) // this calls our compiled Rust function!\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\nNow, run `python3 -m http.server` in this directory, load up `localhost:8000`, and pop open the developer tools.\n\nIf you see `3` in the console. we have had great success!\n\n> Serving `index.html` with a relatively modern HTTP server is crucial for loading our WASM module because the `application/wasm` MIME type must be supported. Opening our page from the file system _will not work_. If you have trouble with the Python server, check [here](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/set_up_a_local_testing_server#running_a_simple_local_http_server) or use an alternative server that you are comfortable with.\n\n## What Now?\n\nWebAssembly opens up a new horizon of opportunities for web applications and you now have the super power of knowing how to use it!\n\nTo learn more about WASM, `wasm-pack`, and Rust, check out these resources:\n\n- [**Rust docs**](https://www.rust-lang.org/)\n- [**WebAssembly**](https://webassembly.org/)\n- [**`wasm-pack`**](https://rustwasm.github.io/docs/wasm-pack/)\n\nSee the final source code [here](https://github.com/austincrim/hello-wasm).\n\nIf you have any questions or issues, feel free to reach out on my [Twitter](https://twitter.com/crim_codes).\n"
  },
  {
    "dateWritten": "2021-03-05T02:30:58.000Z",
    "title": "Yet Another Portfolio Redesign",
    "lede": "Web developers love to change their website, right? Describing my motivation and goals behind the latest iteration of austincrim.com",
    "content": "Just give me the links!\\\n[Old Portfolio](https://next-personal-site-4yvzrssbq.vercel.app/)\\\n[New Portfolio](https://austincrim.com)\\\n[Source](https://github.com/austincrim/next-personal-site)\n\n## My Website\n\nLike any web developer, I love reworking and tweaking my personal website. I use it as a place to experiment, practice my design skills, and just have fun. This is the fourth iteration of my site and definitely my favorite so far. My site is relatively simple, just a home page and a blog page. It's built on Next.js and TailwindCSS and reads blog posts from Markdown files at build time.\n\n## Redesign Goals\n\nI began to grow tired of my previous design choices and decided my page needed a refresh. I had a few goals:\n\n*   Simplify the home page\n*   Dark mode\n*   Use a more muted color palette\n*   Introduce subtle, tasteful animations\n\nBy the time I finished, I think I checked every box! I once read that \"great design doesn't ask what it can add, but what it can take away\" and I kept this in mind throughout development. I wanted to remove extraneous details and increase negative space, while including all relevant information in an easily digestible way.\n\n## Dark Mode üåô\n\nAdding dark mode has been something on my todo list for a long time, it's trendy, looks great, and provides a fun development challenge. In my implementation, I wanted to ensure that I respected OS level dark mode settings while allowing a user's choice to persist. I do something like this on page load to check for user preference from local storage or the os:\n```js\n    if (\n        localStorage.theme === 'dark' ||\n        (!('theme' in localStorage) &&\n            window.matchMedia('(prefers-color-scheme: dark)').matches)\n    ) {\n        document.documentElement.classList.add('dark');\n        localStorage.theme = 'dark';\n      } else {\n        document.documentElement.classList.remove('dark');\n        localStorage.theme = 'light';\n```\nThis works because I'm using the class version of dark mode in TailwindCSS, so Tailwind will look for the `dark` class in my markup and then apply the correct classes.\n\n## Summary\n\nIt's always fun to look back at your previous work just to see how far you have come. It helps validate all the hard work you put in and helps motivate you to keep grinding üí™. Let me know what you like about it or what you would change! See you again next year for another redesign.\n"
  }
]
